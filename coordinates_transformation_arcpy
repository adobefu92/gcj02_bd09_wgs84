import arcpy,json,math


"""
基本参数
"""
x_pi = 3.14159265358979324 * 3000.0 / 180.0
pi = 3.1415926535897932384626  # π
a = 6378245.0  # 长半轴
ee = 0.00669342162296594323  # 扁率

def gcj02_to_bd09(lng, lat):
    """
    火星坐标系(GCJ-02)转百度坐标系(BD-09)
    谷歌、高德——>百度
    :param lng:火星坐标经度
    :param lat:火星坐标纬度
    :return:
    """
    z = math.sqrt(lng * lng + lat * lat) + 0.00002 * math.sin(lat * x_pi)
    theta = math.atan2(lat, lng) + 0.000003 * math.cos(lng * x_pi)
    bd_lng = z * math.cos(theta) + 0.0065
    bd_lat = z * math.sin(theta) + 0.006
    return [bd_lng, bd_lat]


def bd09_to_gcj02(bd_lon, bd_lat):
    """
    百度坐标系(BD-09)转火星坐标系(GCJ-02)
    百度——>谷歌、高德
    :param bd_lat:百度坐标纬度
    :param bd_lon:百度坐标经度
    :return:转换后的坐标列表形式
    """
    x = bd_lon - 0.0065
    y = bd_lat - 0.006
    z = math.sqrt(x * x + y * y) - 0.00002 * math.sin(y * x_pi)
    theta = math.atan2(y, x) - 0.000003 * math.cos(x * x_pi)
    gg_lng = z * math.cos(theta)
    gg_lat = z * math.sin(theta)
    return [gg_lng, gg_lat]


def wgs84_to_gcj02(lng, lat):
    """
    WGS84转GCJ02(火星坐标系)
    :param lng:WGS84坐标系的经度
    :param lat:WGS84坐标系的纬度
    :return:
    """
    if out_of_china(lng, lat):  # 判断是否在国内
        return lng, lat
    dlat = _transformlat(lng - 105.0, lat - 35.0)
    dlng = _transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [mglng, mglat]


def gcj02_to_wgs84(lng, lat):
    """
    GCJ02(火星坐标系)转GPS84
    :param lng:火星坐标系的经度
    :param lat:火星坐标系纬度
    :return:
    """
    if out_of_china(lng, lat):
        return lng, lat
    dlat = _transformlat(lng - 105.0, lat - 35.0)
    dlng = _transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [lng * 2 - mglng, lat * 2 - mglat]


def bd09_to_wgs84(bd_lon, bd_lat):
    lon, lat = bd09_to_gcj02(bd_lon, bd_lat)
    return gcj02_to_wgs84(lon, lat)


def wgs84_to_bd09(lon, lat):
    lon, lat = wgs84_to_gcj02(lon, lat)
    return gcj02_to_bd09(lon, lat)


def _transformlat(lng, lat):
    ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \
          0.1 * lng * lat + 0.2 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lat * pi) + 40.0 *
            math.sin(lat / 3.0 * pi)) * 2.0 / 3.0
    ret += (160.0 * math.sin(lat / 12.0 * pi) + 320 *
            math.sin(lat * pi / 30.0)) * 2.0 / 3.0
    return ret


def _transformlng(lng, lat):
    ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \
          0.1 * lng * lat + 0.1 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lng * pi) + 40.0 *
            math.sin(lng / 3.0 * pi)) * 2.0 / 3.0
    ret += (150.0 * math.sin(lng / 12.0 * pi) + 300.0 *
            math.sin(lng / 30.0 * pi)) * 2.0 / 3.0
    return ret


def out_of_china(lng, lat):
    """
    判断是否在国内，不在国内不做偏移
    :param lng:
    :param lat:
    :return:
    """
    return not (lng > 73.66 and lng < 135.05 and lat > 3.86 and lat < 53.55)

'''
1--BD-09 TO GCJ-02
2--BD-09 TO WGS84
3--GCJ-02 TO BD-09
4--GCJ-02 TO WGS84
5--WGS84 TO BD-09
6--WGS84 TO GCJ-02
'''


#arcpy.GetParameter(0)
#transtype =arcpy.GetParameter(1)
#outputfeat=arcpy.GetParameter(2)
#conversion=arcpy.GetParameter(3)
shpout  = 'C:/Users/AdobeFu/Desktop/aaa/aaaaba'
shpload = 'C:/Users/AdobeFu/Desktop/aaa/point.shp'#arcpy.GetParameter(0)
shpload = arcpy.CopyFeatures_management(shpload,shpout)
desc = arcpy.Describe(shpload)
shapetype = desc.shapeType
shpfieldname = desc.shapeFieldName
conversion = 5
if shapetype == 'Polyline':
    print shapetype
    rows = arcpy.UpdateCursor(shpload)
    for row in rows :
        data = row.getValue(shpfieldname)
        newpart = arcpy.Array()
        newarray = arcpy.Array()
        for line in data :
            for pnt in line :
                if conversion == 1 :
                    pntx = bd09_to_gcj02(pnt.X,pnt.Y)[0]
                    pnty = bd09_to_gcj02(pnt.X,pnt.Y)[1]
                    newpnt = arcpy.Point(pntx,pnty)
                    newarray.add(newpnt)
                elif conversion == 2 :
                    pntx = bd09_to_wgs84(pnt.X,pnt.Y)[0]
                    pnty = bd09_to_wgs84(pnt.X,pnt.Y)[1]
                    newpnt = arcpy.Point(pntx,pnty)
                    newarray.add(newpnt)
                elif conversion == 3 :
                    pntx = gcj02_to_bd09(pnt.X, pnt.Y)[0]
                    pnty = gcj02_to_bd09(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 4 :
                    pntx = gcj02_to_wgs84(pnt.X, pnt.Y)[0]
                    pnty = gcj02_to_wgs84(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 5 :
                    pntx = wgs84_to_bd09(pnt.X, pnt.Y)[0]
                    pnty = wgs84_to_bd09(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 6 :
                    pntx = wgs84_to_gcj02(pnt.X, pnt.Y)[0]
                    pnty = wgs84_to_gcj02(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
            newpart.add(newarray)
            newarray.removeAll()
        newline = arcpy.Polyline(newpart)
        newpart.removeAll()
        row.setValue("shape",newline)
        rows.updateRow(row)


elif shapetype == 'Polygon':
    print shapetype
    rows = arcpy.UpdateCursor(shpload)
    for row in rows :
        data = row.getValue(shpfieldname)
        parts = arcpy.Array()
        newarray = arcpy.Array()
        for part in data :
            for pnt in part :
                if conversion == 1 :
                    pntx = bd09_to_gcj02(pnt.X,pnt.Y)[0]
                    pnty = bd09_to_gcj02(pnt.X,pnt.Y)[1]
                    newpnt = arcpy.Point(pntx,pnty)
                    newarray.add(newpnt)
                elif conversion == 2 :
                    pntx = bd09_to_wgs84(pnt.X,pnt.Y)[0]
                    pnty = bd09_to_wgs84(pnt.X,pnt.Y)[1]
                    newpnt = arcpy.Point(pntx,pnty)
                    newarray.add(newpnt)
                elif conversion == 3 :
                    pntx = gcj02_to_bd09(pnt.X, pnt.Y)[0]
                    pnty = gcj02_to_bd09(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 4 :
                    pntx = gcj02_to_wgs84(pnt.X, pnt.Y)[0]
                    pnty = gcj02_to_wgs84(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 5 :
                    pntx = wgs84_to_bd09(pnt.X, pnt.Y)[0]
                    pnty = wgs84_to_bd09(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
                elif conversion == 6 :
                    pntx = wgs84_to_gcj02(pnt.X, pnt.Y)[0]
                    pnty = wgs84_to_gcj02(pnt.X, pnt.Y)[1]
                    newpnt = arcpy.Point(pntx, pnty)
                    newarray.add(newpnt)
            newarray.add(newarray.getObject(0))
            parts.add(newarray)
            newarray.removeAll()
        newpolygon = arcpy.Polygon(parts)
        parts.removeAll()
        row.setValue("shape",newpolygon)
        rows.updateRow(row)


elif shapetype == 'Point':
    print shapetype
    rows = arcpy.UpdateCursor(shpload)
    for row in rows :
        pnt = row.getValue(shpfieldname)
        pnt = pnt.firstPoint
        if conversion == 1:
            pntx = bd09_to_gcj02(pnt.X, pnt.Y)[0]
            pnty = bd09_to_gcj02(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        elif conversion == 2:
            pntx = bd09_to_wgs84(pnt.X, pnt.Y)[0]
            pnty = bd09_to_wgs84(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        elif conversion == 3:
            pntx = gcj02_to_bd09(pnt.X, pnt.Y)[0]
            pnty = gcj02_to_bd09(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        elif conversion == 4:
            pntx = gcj02_to_wgs84(pnt.X, pnt.Y)[0]
            pnty = gcj02_to_wgs84(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        elif conversion == 5:
            pntx = wgs84_to_bd09(pnt.X, pnt.Y)[0]
            pnty = wgs84_to_bd09(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        elif conversion == 6:
            pntx = wgs84_to_gcj02(pnt.X, pnt.Y)[0]
            pnty = wgs84_to_gcj02(pnt.X, pnt.Y)[1]
            newpnt = arcpy.Point(pntx, pnty)
            pntgeo = arcpy.PointGeometry(newpnt)
        row.setValue("shape",pntgeo)
        rows.updateRow(row)
else :
    arcpy.AddMessage("unexpected shape type")
